/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => HorizontalBlocksPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var HorizontalBlocksPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    __publicField(this, "settings", {});
    __publicField(this, "styleEl");
  }
  async onload() {
    this.settings = await this.loadData() || {};
    this.registerMarkdownCodeBlockProcessor("horizontal", async (source, el, ctx) => {
      const container = document.createElement("div");
      container.className = "horizontal-block-container";
      const blockId = await this.hashString(source);
      const savedLayout = this.settings[`horizontal-block-layout-${blockId}`] || {};
      const sections = source.split(/^---$/m).map((part) => part.trim());
      const blocks = [];
      sections.forEach((markdown, index) => {
        const block = this.createRenderedBlock(markdown, ctx.sourcePath, savedLayout[`title-${index}`]);
        const savedWidth = savedLayout[`width-${index}`];
        if (savedWidth) {
          block.classList.add("flex-fixed");
          this.applyBlockWidth(block, savedWidth);
        } else {
          block.classList.add("flex-grow");
        }
        blocks.push(block);
      });
      for (let i = 0; i < blocks.length; i++) {
        container.appendChild(blocks[i]);
        if (i < blocks.length - 1) {
          const resizer = document.createElement("div");
          resizer.className = "resizer";
          container.appendChild(resizer);
          this.makeResizable(blocks[i], blocks[i + 1], resizer, blockId, i);
        }
      }
      el.appendChild(container);
    });
  }
  onunload() {
  }
  createRenderedBlock(markdown, sourcePath, title) {
    const block = document.createElement("div");
    block.className = "resizable-block";
    if (title) {
      const header = document.createElement("div");
      header.className = "block-title";
      header.innerText = title;
      block.appendChild(header);
    }
    const preview = document.createElement("div");
    preview.className = "md-preview";
    preview.classList.add("markdown-rendered");
    import_obsidian.MarkdownRenderer.render(this.app, markdown, preview, sourcePath, this).then(() => {
      const images = preview.querySelectorAll("img");
      images.forEach((img) => {
        img.classList.add("horizontal-block-image");
      });
    });
    block.appendChild(preview);
    return block;
  }
  makeResizable(left, right, resizer, blockId, index) {
    let isResizing = false;
    let startX = 0;
    let startLeftWidth = 0;
    let mouseMoveListener = null;
    let mouseUpListener = null;
    const mouseDownHandler = (e) => {
      isResizing = true;
      startX = e.clientX;
      startLeftWidth = left.getBoundingClientRect().width;
      document.body.classList.add("resizing-cursor");
      left.classList.add("flex-fixed");
      left.classList.remove("flex-grow");
      right.classList.add("flex-grow");
      right.classList.remove("flex-fixed");
      mouseMoveListener = (e2) => {
        if (!isResizing) return;
        const dx = e2.clientX - startX;
        const newLeftWidth = startLeftWidth + dx;
        left.classList.add("flex-fixed");
        left.classList.remove("flex-grow");
        this.applyBlockWidth(left, newLeftWidth);
        right.classList.add("flex-grow");
        right.classList.remove("flex-fixed");
        this.removeBlockWidth(right);
      };
      mouseUpListener = async () => {
        isResizing = false;
        document.body.classList.remove("resizing-cursor");
        if (mouseMoveListener) {
          document.removeEventListener("mousemove", mouseMoveListener);
          mouseMoveListener = null;
        }
        if (mouseUpListener) {
          document.removeEventListener("mouseup", mouseUpListener);
          mouseUpListener = null;
        }
        const finalWidth = left.getBoundingClientRect().width;
        const layoutKey = `horizontal-block-layout-${blockId}`;
        if (!this.settings[layoutKey]) this.settings[layoutKey] = {};
        this.settings[layoutKey][`width-${index}`] = finalWidth;
        await this.saveData(this.settings);
      };
      document.addEventListener("mousemove", mouseMoveListener);
      document.addEventListener("mouseup", mouseUpListener);
    };
    this.registerDomEvent(resizer, "mousedown", mouseDownHandler);
  }
  async hashString(str) {
    const buffer = new TextEncoder().encode(str);
    const digest = await crypto.subtle.digest("SHA-256", buffer);
    return Array.from(new Uint8Array(digest)).map((x) => x.toString(16).padStart(2, "0")).join("").slice(0, 16);
  }
  applyBlockWidth(block, width) {
    block.classList.add("has-width");
    block.setAttribute("style", `--block-width: ${Math.round(width)}px`);
  }
  removeBlockWidth(block) {
    block.classList.remove("has-width");
    block.removeAttribute("style");
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBNYXJrZG93blJlbmRlcmVyIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhvcml6b250YWxCbG9ja3NQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xuICBwcml2YXRlIHNldHRpbmdzOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge307XG4gIHByaXZhdGUgc3R5bGVFbD86IEhUTUxTdHlsZUVsZW1lbnQ7XG5cbiAgYXN5bmMgb25sb2FkKCkge1xuICAgIC8vIExvYWQgc3RvcmVkIGJsb2NrIHdpZHRoc1xuICAgIHRoaXMuc2V0dGluZ3MgPSAoYXdhaXQgdGhpcy5sb2FkRGF0YSgpKSB8fCB7fTtcblxuICAgIHRoaXMucmVnaXN0ZXJNYXJrZG93bkNvZGVCbG9ja1Byb2Nlc3NvcihcImhvcml6b250YWxcIiwgYXN5bmMgKHNvdXJjZSwgZWwsIGN0eCkgPT4ge1xuICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIGNvbnRhaW5lci5jbGFzc05hbWUgPSBcImhvcml6b250YWwtYmxvY2stY29udGFpbmVyXCI7XG5cbiAgICAgIGNvbnN0IGJsb2NrSWQgPSBhd2FpdCB0aGlzLmhhc2hTdHJpbmcoc291cmNlKTtcbiAgICAgIGNvbnN0IHNhdmVkTGF5b3V0ID0gdGhpcy5zZXR0aW5nc1tgaG9yaXpvbnRhbC1ibG9jay1sYXlvdXQtJHtibG9ja0lkfWBdIHx8IHt9O1xuXG4gICAgICBjb25zdCBzZWN0aW9ucyA9IHNvdXJjZS5zcGxpdCgvXi0tLSQvbSkubWFwKHBhcnQgPT4gcGFydC50cmltKCkpO1xuICAgICAgY29uc3QgYmxvY2tzOiBIVE1MRWxlbWVudFtdID0gW107XG5cbiAgICAgIHNlY3Rpb25zLmZvckVhY2goKG1hcmtkb3duLCBpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBibG9jayA9IHRoaXMuY3JlYXRlUmVuZGVyZWRCbG9jayhtYXJrZG93biwgY3R4LnNvdXJjZVBhdGgsIHNhdmVkTGF5b3V0W2B0aXRsZS0ke2luZGV4fWBdKTtcbiAgICAgICAgY29uc3Qgc2F2ZWRXaWR0aCA9IHNhdmVkTGF5b3V0W2B3aWR0aC0ke2luZGV4fWBdO1xuXG4gICAgICAgIGlmIChzYXZlZFdpZHRoKSB7XG4gICAgICAgICAgYmxvY2suY2xhc3NMaXN0LmFkZChcImZsZXgtZml4ZWRcIik7XG4gICAgICAgICAgdGhpcy5hcHBseUJsb2NrV2lkdGgoYmxvY2ssIHNhdmVkV2lkdGgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJsb2NrLmNsYXNzTGlzdC5hZGQoXCJmbGV4LWdyb3dcIik7XG4gICAgICAgIH1cblxuICAgICAgICBibG9ja3MucHVzaChibG9jayk7XG4gICAgICB9KTtcblxuICAgICAgLy8gQXBwZW5kIGJsb2NrcyBhbmQgcmVzaXplcnNcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmxvY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChibG9ja3NbaV0pO1xuICAgICAgICBpZiAoaSA8IGJsb2Nrcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgY29uc3QgcmVzaXplciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgcmVzaXplci5jbGFzc05hbWUgPSBcInJlc2l6ZXJcIjtcbiAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQocmVzaXplcik7XG4gICAgICAgICAgdGhpcy5tYWtlUmVzaXphYmxlKGJsb2Nrc1tpXSwgYmxvY2tzW2kgKyAxXSwgcmVzaXplciwgYmxvY2tJZCwgaSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZWwuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcbiAgICB9KTtcbiAgfVxuXG4gIG9udW5sb2FkKCkge1xuICB9XG5cbiAgY3JlYXRlUmVuZGVyZWRCbG9jayhtYXJrZG93bjogc3RyaW5nLCBzb3VyY2VQYXRoOiBzdHJpbmcsIHRpdGxlPzogc3RyaW5nKTogSFRNTEVsZW1lbnQge1xuICAgIGNvbnN0IGJsb2NrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBibG9jay5jbGFzc05hbWUgPSBcInJlc2l6YWJsZS1ibG9ja1wiO1xuXG4gICAgaWYgKHRpdGxlKSB7XG4gICAgICBjb25zdCBoZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgaGVhZGVyLmNsYXNzTmFtZSA9IFwiYmxvY2stdGl0bGVcIjtcbiAgICAgIGhlYWRlci5pbm5lclRleHQgPSB0aXRsZTtcbiAgICAgIGJsb2NrLmFwcGVuZENoaWxkKGhlYWRlcik7XG4gICAgfVxuXG4gICAgY29uc3QgcHJldmlldyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgcHJldmlldy5jbGFzc05hbWUgPSBcIm1kLXByZXZpZXdcIjtcbiAgICBwcmV2aWV3LmNsYXNzTGlzdC5hZGQoXCJtYXJrZG93bi1yZW5kZXJlZFwiKTtcblxuICAgIE1hcmtkb3duUmVuZGVyZXIucmVuZGVyKHRoaXMuYXBwLCBtYXJrZG93biwgcHJldmlldywgc291cmNlUGF0aCwgdGhpcykudGhlbigoKSA9PiB7XG4gICAgICBjb25zdCBpbWFnZXMgPSBwcmV2aWV3LnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbWdcIik7XG4gICAgICBpbWFnZXMuZm9yRWFjaCgoaW1nOiBIVE1MSW1hZ2VFbGVtZW50KSA9PiB7XG4gICAgICAgIGltZy5jbGFzc0xpc3QuYWRkKFwiaG9yaXpvbnRhbC1ibG9jay1pbWFnZVwiKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIFxuICAgIGJsb2NrLmFwcGVuZENoaWxkKHByZXZpZXcpO1xuXG4gICAgcmV0dXJuIGJsb2NrO1xuICB9XG5cbiAgbWFrZVJlc2l6YWJsZShsZWZ0OiBIVE1MRWxlbWVudCwgcmlnaHQ6IEhUTUxFbGVtZW50LCByZXNpemVyOiBIVE1MRWxlbWVudCwgYmxvY2tJZDogc3RyaW5nLCBpbmRleDogbnVtYmVyKSB7XG4gICAgbGV0IGlzUmVzaXppbmcgPSBmYWxzZTtcbiAgICBsZXQgc3RhcnRYID0gMDtcbiAgICBsZXQgc3RhcnRMZWZ0V2lkdGggPSAwO1xuICAgIGxldCBtb3VzZU1vdmVMaXN0ZW5lcjogKChlOiBNb3VzZUV2ZW50KSA9PiB2b2lkKSB8IG51bGwgPSBudWxsO1xuICAgIGxldCBtb3VzZVVwTGlzdGVuZXI6ICgoZTogTW91c2VFdmVudCkgPT4gdm9pZCkgfCBudWxsID0gbnVsbDtcblxuICAgIGNvbnN0IG1vdXNlRG93bkhhbmRsZXIgPSAoZTogTW91c2VFdmVudCkgPT4ge1xuICAgICAgaXNSZXNpemluZyA9IHRydWU7XG4gICAgICBzdGFydFggPSBlLmNsaWVudFg7XG4gICAgICBzdGFydExlZnRXaWR0aCA9IGxlZnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoXCJyZXNpemluZy1jdXJzb3JcIik7XG5cbiAgICAgIC8vIFByZXBhcmUgY2xhc3NlcyBmb3IgcmVzaXppbmcgc3RhdGVcbiAgICAgIGxlZnQuY2xhc3NMaXN0LmFkZChcImZsZXgtZml4ZWRcIik7XG4gICAgICBsZWZ0LmNsYXNzTGlzdC5yZW1vdmUoXCJmbGV4LWdyb3dcIik7XG4gICAgICByaWdodC5jbGFzc0xpc3QuYWRkKFwiZmxleC1ncm93XCIpO1xuICAgICAgcmlnaHQuY2xhc3NMaXN0LnJlbW92ZShcImZsZXgtZml4ZWRcIik7XG5cbiAgICAgIC8vIENyZWF0ZSBmcmVzaCBldmVudCBoYW5kbGVycyBmb3IgdGhpcyByZXNpemUgc2Vzc2lvblxuICAgICAgbW91c2VNb3ZlTGlzdGVuZXIgPSAoZTogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICBpZiAoIWlzUmVzaXppbmcpIHJldHVybjtcbiAgICAgICAgY29uc3QgZHggPSBlLmNsaWVudFggLSBzdGFydFg7XG4gICAgICAgIGNvbnN0IG5ld0xlZnRXaWR0aCA9IHN0YXJ0TGVmdFdpZHRoICsgZHg7XG4gICAgICAgIGxlZnQuY2xhc3NMaXN0LmFkZChcImZsZXgtZml4ZWRcIik7XG4gICAgICAgIGxlZnQuY2xhc3NMaXN0LnJlbW92ZShcImZsZXgtZ3Jvd1wiKTtcbiAgICAgICAgdGhpcy5hcHBseUJsb2NrV2lkdGgobGVmdCwgbmV3TGVmdFdpZHRoKTtcblxuICAgICAgICByaWdodC5jbGFzc0xpc3QuYWRkKFwiZmxleC1ncm93XCIpO1xuICAgICAgICByaWdodC5jbGFzc0xpc3QucmVtb3ZlKFwiZmxleC1maXhlZFwiKTtcbiAgICAgICAgdGhpcy5yZW1vdmVCbG9ja1dpZHRoKHJpZ2h0KTtcbiAgICAgIH07XG5cbiAgICAgIG1vdXNlVXBMaXN0ZW5lciA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgaXNSZXNpemluZyA9IGZhbHNlO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoXCJyZXNpemluZy1jdXJzb3JcIik7XG5cbiAgICAgICAgLy8gQ2xlYW4gdXAgZXZlbnQgbGlzdGVuZXJzXG4gICAgICAgIGlmIChtb3VzZU1vdmVMaXN0ZW5lcikge1xuICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgbW91c2VNb3ZlTGlzdGVuZXIpO1xuICAgICAgICAgIG1vdXNlTW92ZUxpc3RlbmVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobW91c2VVcExpc3RlbmVyKSB7XG4gICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgbW91c2VVcExpc3RlbmVyKTtcbiAgICAgICAgICBtb3VzZVVwTGlzdGVuZXIgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZmluYWxXaWR0aCA9IGxlZnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gICAgICAgIGNvbnN0IGxheW91dEtleSA9IGBob3Jpem9udGFsLWJsb2NrLWxheW91dC0ke2Jsb2NrSWR9YDtcbiAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzW2xheW91dEtleV0pIHRoaXMuc2V0dGluZ3NbbGF5b3V0S2V5XSA9IHt9O1xuICAgICAgICB0aGlzLnNldHRpbmdzW2xheW91dEtleV1bYHdpZHRoLSR7aW5kZXh9YF0gPSBmaW5hbFdpZHRoO1xuICAgICAgICBhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuICAgICAgfTtcblxuICAgICAgLy8gQWRkIGV2ZW50IGxpc3RlbmVyc1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBtb3VzZU1vdmVMaXN0ZW5lcik7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBtb3VzZVVwTGlzdGVuZXIpO1xuICAgIH07XG5cbiAgICB0aGlzLnJlZ2lzdGVyRG9tRXZlbnQocmVzaXplciwgXCJtb3VzZWRvd25cIiwgbW91c2VEb3duSGFuZGxlcik7XG4gIH1cblxuICBhc3luYyBoYXNoU3RyaW5nKHN0cjogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCBidWZmZXIgPSBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoc3RyKTtcbiAgICBjb25zdCBkaWdlc3QgPSBhd2FpdCBjcnlwdG8uc3VidGxlLmRpZ2VzdCgnU0hBLTI1NicsIGJ1ZmZlcik7XG4gICAgcmV0dXJuIEFycmF5LmZyb20obmV3IFVpbnQ4QXJyYXkoZGlnZXN0KSlcbiAgICAgIC5tYXAoeCA9PiB4LnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCAnMCcpKVxuICAgICAgLmpvaW4oJycpXG4gICAgICAuc2xpY2UoMCwgMTYpOyAvLyBTaG9ydGVuIGZvciBrZXlcbiAgfVxuXG4gIHByaXZhdGUgYXBwbHlCbG9ja1dpZHRoKGJsb2NrOiBIVE1MRWxlbWVudCwgd2lkdGg6IG51bWJlcikge1xuICAgIGJsb2NrLmNsYXNzTGlzdC5hZGQoJ2hhcy13aWR0aCcpO1xuICAgIC8vIFVzZSBpbmxpbmUgc3R5bGUgd2l0aCBDU1MgY3VzdG9tIHByb3BlcnR5XG4gICAgYmxvY2suc2V0QXR0cmlidXRlKCdzdHlsZScsIGAtLWJsb2NrLXdpZHRoOiAke01hdGgucm91bmQod2lkdGgpfXB4YCk7XG4gIH1cblxuICBwcml2YXRlIHJlbW92ZUJsb2NrV2lkdGgoYmxvY2s6IEhUTUxFbGVtZW50KSB7XG4gICAgYmxvY2suY2xhc3NMaXN0LnJlbW92ZSgnaGFzLXdpZHRoJyk7XG4gICAgYmxvY2sucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICB9XG5cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUF5QztBQUV6QyxJQUFxQix5QkFBckIsY0FBb0QsdUJBQU87QUFBQSxFQUEzRDtBQUFBO0FBQ0Usd0JBQVEsWUFBZ0MsQ0FBQztBQUN6Qyx3QkFBUTtBQUFBO0FBQUEsRUFFUixNQUFNLFNBQVM7QUFFYixTQUFLLFdBQVksTUFBTSxLQUFLLFNBQVMsS0FBTSxDQUFDO0FBRTVDLFNBQUssbUNBQW1DLGNBQWMsT0FBTyxRQUFRLElBQUksUUFBUTtBQUMvRSxZQUFNLFlBQVksU0FBUyxjQUFjLEtBQUs7QUFDOUMsZ0JBQVUsWUFBWTtBQUV0QixZQUFNLFVBQVUsTUFBTSxLQUFLLFdBQVcsTUFBTTtBQUM1QyxZQUFNLGNBQWMsS0FBSyxTQUFTLDJCQUEyQixPQUFPLEVBQUUsS0FBSyxDQUFDO0FBRTVFLFlBQU0sV0FBVyxPQUFPLE1BQU0sUUFBUSxFQUFFLElBQUksVUFBUSxLQUFLLEtBQUssQ0FBQztBQUMvRCxZQUFNLFNBQXdCLENBQUM7QUFFL0IsZUFBUyxRQUFRLENBQUMsVUFBVSxVQUFVO0FBQ3BDLGNBQU0sUUFBUSxLQUFLLG9CQUFvQixVQUFVLElBQUksWUFBWSxZQUFZLFNBQVMs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
