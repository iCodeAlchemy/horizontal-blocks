/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => HorizontalBlocksPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var HorizontalBlocksPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    __publicField(this, "settings", {});
  }
  async onload() {
    console.log("Horizontal Blocks Plugin loaded");
    this.settings = await this.loadData() || {};
    this.registerMarkdownCodeBlockProcessor("horizontal", async (source, el, ctx) => {
      const container = document.createElement("div");
      container.className = "horizontal-block-container";
      const blockId = await this.hashString(source);
      const savedLayout = this.settings[`horizontal-block-layout-${blockId}`] || {};
      const sections = source.split(/^---$/m).map((part) => part.trim());
      const blocks = [];
      sections.forEach((markdown, index) => {
        const block = this.createRenderedBlock(markdown, ctx.sourcePath, savedLayout[`title-${index}`]);
        const savedWidth = savedLayout[`width-${index}`];
        if (savedWidth) {
          block.style.flex = `0 0 ${savedWidth}px`;
        } else {
          block.style.flex = `1`;
        }
        blocks.push(block);
      });
      for (let i = 0; i < blocks.length; i++) {
        container.appendChild(blocks[i]);
        if (i < blocks.length - 1) {
          const resizer = document.createElement("div");
          resizer.className = "resizer";
          container.appendChild(resizer);
          this.makeResizable(blocks[i], blocks[i + 1], resizer, blockId, i);
        }
      }
      el.appendChild(container);
    });
  }
  createRenderedBlock(markdown, sourcePath, title) {
    const block = document.createElement("div");
    block.className = "resizable-block";
    if (title) {
      const header = document.createElement("div");
      header.className = "block-title";
      header.innerText = title;
      block.appendChild(header);
    }
    const preview = document.createElement("div");
    preview.className = "md-preview";
    preview.classList.add("markdown-rendered");
    import_obsidian.MarkdownRenderer.render(this.app, markdown, preview, sourcePath, this).then(() => {
      const images = preview.querySelectorAll("img");
      images.forEach((img) => {
        img.classList.add("horizontal-block-image");
      });
    });
    block.appendChild(preview);
    return block;
  }
  makeResizable(left, right, resizer, blockId, index) {
    let isResizing = false;
    let startX = 0;
    let startLeftWidth = 0;
    const mouseDownHandler = (e) => {
      isResizing = true;
      startX = e.clientX;
      startLeftWidth = left.getBoundingClientRect().width;
      document.body.style.cursor = "col-resize";
      document.addEventListener("mousemove", mouseMoveHandler);
      document.addEventListener("mouseup", mouseUpHandler);
    };
    const mouseMoveHandler = (e) => {
      if (!isResizing) return;
      const dx = e.clientX - startX;
      const newLeftWidth = startLeftWidth + dx;
      left.style.flex = `0 0 ${newLeftWidth}px`;
      right.style.flex = `1`;
    };
    const mouseUpHandler = async () => {
      isResizing = false;
      document.body.style.cursor = "";
      document.removeEventListener("mousemove", mouseMoveHandler);
      document.removeEventListener("mouseup", mouseUpHandler);
      const finalWidth = left.getBoundingClientRect().width;
      const layoutKey = `horizontal-block-layout-${blockId}`;
      if (!this.settings[layoutKey]) this.settings[layoutKey] = {};
      this.settings[layoutKey][`width-${index}`] = finalWidth;
      await this.saveData(this.settings);
    };
    resizer.addEventListener("mousedown", mouseDownHandler);
  }
  async hashString(str) {
    const buffer = new TextEncoder().encode(str);
    const digest = await crypto.subtle.digest("SHA-256", buffer);
    return Array.from(new Uint8Array(digest)).map((x) => x.toString(16).padStart(2, "0")).join("").slice(0, 16);
  }
};
//# sourceMappingURL=data:application/json;base64,
